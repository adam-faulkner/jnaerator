#summary JNAerator's command-line options & environment variables
<wiki:gadget url="http://jnaerator.googlecode.com/svn/wiki/adsense728x90.xml" border="0" width="468" height="60" />

= Syntax =

{{{ java -jar jnaerator.jar options headerFiles dynamicLibrariesFiles }}}

= Options =

 * *@argumentsFile*
   Read command-line arguments from a file. File may contain multiple lines (those beginning with "//" will be skipped), file wildcards will be resolved within the file content.
 * *-entry EntryClassName*
   Generates a class _entryclassName.EntryClassName_ that will contain all of the jnaerated libraries instances. User code will just need to static import or derive from this class to access to the instances.
 * *-project solutionFile "Config|Platform"*
   Parse all the headers of a Visual Studio Express C++ 2008 solution. "Config|Platform" is typically "Release|Win32".
 * *-Ipath*
   Add include path. See JNAERATOR_INCLUDE_PATH below
 * *-Fpath*
   Add framework lookup path. See JNAERATOR_FRAMEWORKS_PATH below
 * *-Dsymbol*
   Define preprocessor symbol
 * *-Dsymbol=value*
   Define preprocessor symbol to a value
 * *-studio*
   Launch JNAeratorStudio
 * *-help*
   Show help on usage
 * *-library name*
   Define the name of the output library. This is a state parameter, it will affect all files listed after it, until another -library switch is provided. It does not affect sources included from a project file (Visual Studio...). 
   C functions exported in library "test" will end up in class "TestLibrary", for instance. 
   The name of the library is the one fed to JNA to find the shared library, so library "test" must be in "test.dll" on Windows, "libtest.dylib" on Mac OS X and  "libtest.so" on other Unices.
   Note that a special hack is done for library "c" on Windows systems : the output name is set to "msvcrt" instead of "c".
 * *-package outputPackageName*
   Set the Java package in which all the output will reside (by default, set to the library name).
 * *-jar outputJar*
   Jar file where all generated sources and the compiled classes go.
 * *-framework FrameworkName*
   Parse all the headers defined in a framework.
 * *-frameworksPath path1:path2...*
   Set the frameworks path. See JNAERATOR_FRAMEWORKS_PATH below. Overrides all previous -F switches.
 * *-o dir*
   Set output directory. Current directory by default.

= Environment Variables =

All of these variables may be overridden by setting the environment variable ({{{ set VAR=value }}} on Windows, {{{ export VAR=value }}} on most unices) or through Java properties ({{{ java -DVAR=value -jar jnaerator.jar ... }}}).

 * VISUAL_STUDIO_HOME = 
   {{{ 
C:\Program Files\Microsoft Visual Studio 9.0 
   }}}
 * WINDOWS_SDK_HOME
   {{{ 
C:\Program Files\Microsoft SDKs\Windows\v6.0A
   }}}
 * VISUAL_STUDIO_INCLUDES = VISUAL_STUDIO_HOME;WINDOWS_SDK_HOME
 * JNAERATOR_INCLUDE_PATH : has the following platform-dependent default values :
   * Windows : uses VISUAL_STUDIO_INCLUDES
   * Mac OS X : {{{ /Developer/SDKs/MacOSX10.4u.sdk/usr/include:. }}}
   * Current dir on any other platform

 * JNAERATOR_FRAMEWORKS_PATH is only set on Mac OS X : 
   {{{
/System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks:\
/System/Library/Frameworks/ApplicationServices.framework/Versions/Current/Frameworks:\
/System/Library/Frameworks:\
/Library/Frameworks:\
~/Library/Frameworks 
   }}}
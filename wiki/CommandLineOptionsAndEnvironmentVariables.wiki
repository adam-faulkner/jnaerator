#summary JNAerator's command-line options & environment variables
#sidebar sidebar

= Syntax =

{{{ java -jar jnaerator.jar options headerFiles dynamicLibrariesFiles }}}

= Options =

 * *@(.+)? <outFile: ExistingFile>*
  Jar file where all generated sources and the compiled classes go
 * *-o <outDir: OutputDir>*
  Output directory for all artifacts
 * *-scanSymbols*
  Extract, unmangle and parse the symbols all listed shared libraries
 * *-I(.+)? <dir: File>*
  Add a directory to the include path
 * *-F(.+)? <dir: File>*
  Add a directory to the frameworks path
 * *-frameworksPath <path: String>*
  By default: [/System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks, /System/Library/Frameworks/ApplicationServices.framework/Versions/Current/Frameworks, /System/Library/Frameworks, /Library/Frameworks, /Local/Library/Frameworks/, /Users/ochafik/Library/Frameworks]
 * *-framework <frameworkName: String>*
  JNAerate a framework using its headers and its *.bridgesupport files if available
 * *-limitComments*
  Avoid useless comments (source file + line, skipped items...)
 * *-nocpp*
  Do not define the __cplusplus symbol
 * *-gui*
  Show minimalist progression GUI
 * *-noRuntime*
  Don't copy runtime classes to JAR output
 * *-jar <outFile: OutputFile>*
  Jar file where all generated sources and the compiled classes go
 * *-test*
  Launch JNAerator's unit tests (DEBUG option)
 * *-studio*
  Launch JNAeratorStudio
 * *-project <solutionFile: ExistingFile> <configString: String>*
  Read Visual Studio 2008 project or solution file and use the configuration specified (e.g. "Release|Win32").
 * *-noAuto*
  No auto-configuration of preprocessor symbols and paths
 * *-direct*
  JNAerate libraries that use JNA's faster direct call convention
 * *-preferJavac*
  Use Sun's Javac compiler instead of Eclipse's ecj, if possible
 * *-structsInLibrary*
  Force structs to be JNAerated as inner classes of their declaring libraries
 * *-package <forcedPackageName: String>*
  Define the package for the current library (state variable)
 * *-D([^=]*)(?:=(.*))? <name: String> <value: String>*
  Define a macro symbol
 * *-root(?:Package)? <package: String>*
  Define the root package for all output classes
 * *-library <libName: String>*
  Gives name of the library in which definitions will end up. "c" library will be generated as CLibrary class (state variable)
 * *-defaultLibrary <libName: String>*
  Name of output library for elements declared in files not covered by a ${CurrentLibrary} switch
 * *-h(?:elp)?*
  Show command line arguments help
 * *-entry <entryName: String>*
  Define the name of the libraries entry point (class that contains all the libraries instances)
 * *-v(?:erbose)?*
  Verbose output (both console and files)
 * *-preprocessingOut <outFile: OutputFile>*
  Write the preprocessor output in a file (automatically set when ${Verbose} is used).
 * *-wikiHelp*
  Output a wiki-friendly help
 * *-arch <archName: String>*
  Define the current architecture for libraries (state variable)
 * *-macrosOut <outFile: OutputFile>*
  Write the preprocessor macros in a file (automatically set when ${Verbose} is used).
 * * <file: OptionalFile>*
  Any header (or directory containing headers at any level of hierarchy), shared library, *.bridgesupport file or *.jnaerator file

= Environment Variables =

All of these variables may be overridden by setting the environment variable ({{{ set VAR=value }}} on Windows, {{{ export VAR=value }}} on most unices) or through Java properties ({{{ java -DVAR=value -jar jnaerator.jar ... }}}).

 * VISUAL_STUDIO_HOME = 
   {{{ 
C:\Program Files\Microsoft Visual Studio 9.0 
   }}}
 * WINDOWS_SDK_HOME
   {{{ 
C:\Program Files\Microsoft SDKs\Windows\v6.0A
   }}}
 * VISUAL_STUDIO_INCLUDES = VISUAL_STUDIO_HOME;WINDOWS_SDK_HOME
 * JNAERATOR_INCLUDE_PATH : has the following platform-dependent default values :
   * Windows : uses VISUAL_STUDIO_INCLUDES
   * Mac OS X : {{{ /Developer/SDKs/MacOSX10.4u.sdk/usr/include:. }}}
   * Current dir on any other platform

 * JNAERATOR_FRAMEWORKS_PATH is only set on Mac OS X : 
   {{{
/System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks:\
/System/Library/Frameworks/ApplicationServices.framework/Versions/Current/Frameworks:\
/System/Library/Frameworks:\
/Library/Frameworks:\
~/Library/Frameworks 
   }}}
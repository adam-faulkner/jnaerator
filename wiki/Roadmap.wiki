#summary Plans for JNAerator
#labels Phase-Requirements,Featured

= New features =

  # include libraries to generated JARs, w/ auto extract
  # allow predefined source content to be prepared for each output class - raw text or velocity macro, post trigger w/ script api ? 
  # create Pointer subclasses for unknown pointer references (would need adding a {{{ public Pointer(Pointer p) }}} constructor to JNA)
  # make jnaeration features selectable from the GUI & CLI
  # text / xml format for jnaerator config (w/ variables, so that users might contribute configs for well-known libraries)
  # include jna.jar & rococoa.jar to generated JARs (optional, otherwise link to them in classpath)
  # [http://code.google.com/p/jnaerator/issues/detail?id=5 Translate macros and inline functions to Java]
  # rework globals entirely : {{{ int Lib.var.get() }}}, {{{ Lib.var.set(int) }}} when possible

= Enhancements =

  # OK cache downloaded jars in JNAeratorStudio (update if lastmodified date changed)
  # add option to switch NativeLong off : on MSVC++ 64bits, long is 32 bits !
  # prefer simple names for structs and enums (S typedef instead of `_`S tag)
  # add progression bar to studio
  # select Objective-C classes needed to be exported (actually, resolve C structs needed by input headers as well)
  # add option not to keep comments (then by default, do not include sources in generated JAR)
  # automated tests for Objective-C (long time no try !)
  # enhance test coverage of JNAerator with the new JNAerationTests infrastructure
  # enhance the error reporting of parsing (work on antlr grammar) and of compilation
  # refactor entirely the convertTypeToJNA method to something much cleaner (scanner ?)
 
= Bugfixes = 

  # OK fix the compiler's classpath in in JNAeratorStudio + Web Start
  # finalize VisualStudio parsing (replace $() variables)
  # fix the line-numbering in comments
  # parse {{{ typedef unsigned U; register U int i; }}} : either parse a soup of words and disambiguate in a separate pass or renounce to multithreaded parsing and lookup typedefs from inside the parser
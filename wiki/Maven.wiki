#summary Maven repository and usage instructions
#labels Featured
#sidebar TOCWiki
<wiki:toc max_depth="3" />

= Introduction =

JNAerator is fully Maven-ized, which means that the following are possible :
  * Run the [http://jnaerator.sourceforge.net/maven-jnaerator-plugin/ JNAerator plugin] in a Maven project on a set of headers to create Java bindings
  * Add a dependency to JNAerator runtime classes (which include JNA + Rococoa) in a Maven project
  * [CompilingJNAerator  Build JNAerator with Maven]

JNAerator's Maven-generated sites are available [http://jnaerator.sourceforge.net/sites/ here].

TODO future developments might include Maven archetypes to bootstrap standard native library wrappings projects

= Repository =

{{{
<project>
	...
	<repositories>
		<repository>
		  <id>nativelibs4java-repo</id>
		  <name>NativeLibs4Java Maven Repository</name>
		  <url>http://nativelibs4java.sourceforge.net/maven</url>
		</repository>
	</repositories>
	<pluginRepositories>
        	<pluginRepository>
			  <id>nativelibs4java-pluginRepo</id>
			  <url>http://nativelibs4java.sourceforge.net/maven</url>
	        </pluginRepository>
	</pluginRepositories>
	...
</project>
}}}

= Usage = 

== JNAerator runtime classes ==

Needed to support JNAerated sources :
{{{
<project>
	...
	<dependencies>
	   <dependency>
		<groupId>com.jnaerator</groupId>
		 <artifactId>jnaerator-runtime</artifactId>
		 <version>0.9.9</version>
		<scope>compile</scope>
	   </dependency>
	</dependencies>
	...
</project>
}}}

== Maven JNAerator Plugin ==

  # Put command line arguments in file `src/main/jnaerator/config.jnaerator`
  # Add the following lines to your `pom.xml` :
  {{{
<project>
	...
	<build>
		<plugins>
			...
			<plugin>
				<groupId>com.jnaerator</groupId>
				<artifactId>maven-jnaerator-plugin</artifactId>
				<version>0.9.9</version>
			</plugin>
			...
		</plugins>
	</build>
	...
</project>
}}}
  #  Run JNAerator through Maven with the following command :
  {{{ 
mvn com.jnaerator:maven-jnaerator-plugin:jnaerate
}}}
  This will create Java & Scala files in `target/generated-sources`